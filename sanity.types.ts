/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
    _type: "sanity.imagePaletteSwatch";
    background?: string;
    foreground?: string;
    population?: number;
    title?: string;
};

export type SanityImagePalette = {
    _type: "sanity.imagePalette";
    darkMuted?: SanityImagePaletteSwatch;
    lightVibrant?: SanityImagePaletteSwatch;
    darkVibrant?: SanityImagePaletteSwatch;
    vibrant?: SanityImagePaletteSwatch;
    dominant?: SanityImagePaletteSwatch;
    lightMuted?: SanityImagePaletteSwatch;
    muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
    _type: "sanity.imageDimensions";
    height?: number;
    width?: number;
    aspectRatio?: number;
};

export type Geopoint = {
    _type: "geopoint";
    lat?: number;
    lng?: number;
    alt?: number;
};

export type Promotion = {
    _id: string;
    _type: "promotion";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    title?: string;
    slug?: Slug;
    description?: string;
    discountPercentage?: number;
    startDate?: string;
    endDate?: string;
    icon?: "sparkle" | "star" | "discount" | "gift";
    status?: "upcoming" | "active" | "expired";
};

export type Blog = {
    _id: string;
    _type: "blog";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    title?: string;
    slug?: Slug;
    publishedAt?: string;
    mainImage?: {
        asset?: {
            _ref: string;
            _type: "reference";
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        _type: "image";
    };
    excerpt?: string;
    body?: Array<
        | {
              children?: Array<{
                  marks?: Array<string>;
                  text?: string;
                  _type: "span";
                  _key: string;
              }>;
              style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
              listItem?: "bullet" | "number";
              markDefs?: Array<{
                  href?: string;
                  _type: "link";
                  _key: string;
              }>;
              level?: number;
              _type: "block";
              _key: string;
          }
        | {
              asset?: {
                  _ref: string;
                  _type: "reference";
                  _weak?: boolean;
                  [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
              };
              hotspot?: SanityImageHotspot;
              crop?: SanityImageCrop;
              _type: "image";
              _key: string;
          }
    >;
    author?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "author";
    };
};

export type Author = {
    _id: string;
    _type: "author";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    name?: string;
    image?: {
        asset?: {
            _ref: string;
            _type: "reference";
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        _type: "image";
    };
    bio?: string;
};

export type Newsletter = {
    _id: string;
    _type: "newsletter";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    title?: string;
    slug?: Slug;
    publishedAt?: string;
    content?: Array<
        | {
              children?: Array<{
                  marks?: Array<string>;
                  text?: string;
                  _type: "span";
                  _key: string;
              }>;
              style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
              listItem?: "bullet" | "number";
              markDefs?: Array<{
                  href?: string;
                  _type: "link";
                  _key: string;
              }>;
              level?: number;
              _type: "block";
              _key: string;
          }
        | {
              asset?: {
                  _ref: string;
                  _type: "reference";
                  _weak?: boolean;
                  [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
              };
              hotspot?: SanityImageHotspot;
              crop?: SanityImageCrop;
              _type: "image";
              _key: string;
          }
    >;
    subscribers?: Array<string>;
    status?: "draft" | "published" | "archived";
};

export type SanityImageCrop = {
    _type: "sanity.imageCrop";
    top?: number;
    bottom?: number;
    left?: number;
    right?: number;
};

export type SanityImageHotspot = {
    _type: "sanity.imageHotspot";
    x?: number;
    y?: number;
    height?: number;
    width?: number;
};

export type SanityImageAsset = {
    _id: string;
    _type: "sanity.imageAsset";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    originalFilename?: string;
    label?: string;
    title?: string;
    description?: string;
    altText?: string;
    sha1hash?: string;
    extension?: string;
    mimeType?: string;
    size?: number;
    assetId?: string;
    uploadId?: string;
    path?: string;
    url?: string;
    metadata?: SanityImageMetadata;
    source?: SanityAssetSourceData;
};

export type SanityImageMetadata = {
    _type: "sanity.imageMetadata";
    location?: Geopoint;
    dimensions?: SanityImageDimensions;
    palette?: SanityImagePalette;
    lqip?: string;
    blurHash?: string;
    hasAlpha?: boolean;
    isOpaque?: boolean;
};

export type Application = {
    _id: string;
    _type: "application";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    job?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "job";
    };
    resume?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "resume";
    };
    slug?: Slug;
    firstName?: string;
    lastName?: string;
    email?: string;
    phone?: string;
    publishedAt?: string;
};

export type Resume = {
    _id: string;
    _type: "resume";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    resumeFile?: {
        asset?: {
            _ref: string;
            _type: "reference";
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: "sanity.fileAsset";
        };
        _type: "file";
    };
    slug?: Slug;
};

export type SanityFileAsset = {
    _id: string;
    _type: "sanity.fileAsset";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    originalFilename?: string;
    label?: string;
    title?: string;
    description?: string;
    altText?: string;
    sha1hash?: string;
    extension?: string;
    mimeType?: string;
    size?: number;
    assetId?: string;
    uploadId?: string;
    path?: string;
    url?: string;
    source?: SanityAssetSourceData;
};

export type SanityAssetSourceData = {
    _type: "sanity.assetSourceData";
    name?: string;
    id?: string;
    url?: string;
};

export type Job = {
    _id: string;
    _type: "job";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    title?: string;
    slug?: Slug;
    location?: string;
    description?: string;
    publishedAt?: string;
};

export type Slug = {
    _type: "slug";
    current?: string;
    source?: string;
};

export type AllSanitySchemaTypes =
    | SanityImagePaletteSwatch
    | SanityImagePalette
    | SanityImageDimensions
    | Geopoint
    | Promotion
    | Blog
    | Author
    | Newsletter
    | SanityImageCrop
    | SanityImageHotspot
    | SanityImageAsset
    | SanityImageMetadata
    | Application
    | Resume
    | SanityFileAsset
    | SanityAssetSourceData
    | Job
    | Slug;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./sanity/lib/applications/getAllApplications.ts
// Variable: ALL_APPLICATIONS_QUERY
// Query: *[_type == "application"]{        _id,        firstName,        lastName,        email,        phone,        publishedAt,        job->{            title        },        resumeFile{            asset->{                _ref            }        }    }
export type ALL_APPLICATIONS_QUERYResult = Array<{
    _id: string;
    firstName: string | null;
    lastName: string | null;
    email: string | null;
    phone: string | null;
    publishedAt: string | null;
    job: {
        title: string | null;
    } | null;
    resumeFile: null;
}>;

// Source: ./sanity/lib/applications/getApplicationBySlug.ts
// Variable: APPLICATION_BY_SLUG_QUERY
// Query: *[_type == "application" && slug.current == $slug][0]{        _id,        firstName,        lastName,        email,        phone,        publishedAt,        job->{            title        },        resumeFile{            asset->{                _ref            }        }    }
export type APPLICATION_BY_SLUG_QUERYResult = {
    _id: string;
    firstName: string | null;
    lastName: string | null;
    email: string | null;
    phone: string | null;
    publishedAt: string | null;
    job: {
        title: string | null;
    } | null;
    resumeFile: null;
} | null;

// Source: ./sanity/lib/authors/getAllAuthors.ts
// Variable: ALL_AUTHORS
// Query: *[_type == "author"] | order(name asc)
export type ALL_AUTHORSResult = Array<{
    _id: string;
    _type: "author";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    name?: string;
    image?: {
        asset?: {
            _ref: string;
            _type: "reference";
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        _type: "image";
    };
    bio?: string;
}>;

// Source: ./sanity/lib/authors/getAuthorBySlug.ts
// Variable: AUTHOR_BY_ID_QUERY
// Query: *[_type == "author" && slug.current == $slug] | order(name asc) [0]
export type AUTHOR_BY_ID_QUERYResult = {
    _id: string;
    _type: "author";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    name?: string;
    image?: {
        asset?: {
            _ref: string;
            _type: "reference";
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        _type: "image";
    };
    bio?: string;
} | null;

// Source: ./sanity/lib/blogs/getAllBlogs.ts
// Variable: ALL_BLOGS
// Query: *[_type == "blog"] | order(publishedAt desc) {            _id,            title,            slug,            publishedAt,            mainImage {                asset->{                    _id,                    url                }            },            excerpt,            author->{                _id,                name,                image {                    asset->{                        _id,                        url                    }                },            bio            }        }
export type ALL_BLOGSResult = Array<{
    _id: string;
    title: string | null;
    slug: Slug | null;
    publishedAt: string | null;
    mainImage: {
        asset: {
            _id: string;
            url: string | null;
        } | null;
    } | null;
    excerpt: string | null;
    author: {
        _id: string;
        name: string | null;
        image: {
            asset: {
                _id: string;
                url: string | null;
            } | null;
        } | null;
        bio: string | null;
    } | null;
}>;

// Source: ./sanity/lib/job-openings/getAllJobOpenings.ts
// Variable: ALL_JOB_OPENINGS_QUERY
// Query: *[_type == "job"] | order(name asc)
export type ALL_JOB_OPENINGS_QUERYResult = Array<{
    _id: string;
    _type: "job";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    title?: string;
    slug?: Slug;
    location?: string;
    description?: string;
    publishedAt?: string;
}>;

// Source: ./sanity/lib/job-openings/getJobOpeningBySlug.ts
// Variable: JOB_BY_ID_QUERY
// Query: *[_type == "job" && slug.current == $slug] | order(name asc) [0]
export type JOB_BY_ID_QUERYResult = {
    _id: string;
    _type: "job";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    title?: string;
    slug?: Slug;
    location?: string;
    description?: string;
    publishedAt?: string;
} | null;

// Source: ./sanity/lib/resumes/getAllResumes.ts
// Variable: ALL_RESUMES_QUERY
// Query: *[_type == "resume"]{    _id,    user-> { name },    "resumeFile": resumeFile.asset-> { url },    uploadedAt  } | order(uploadedAt desc)
export type ALL_RESUMES_QUERYResult = Array<{
    _id: string;
    user: null;
    resumeFile: {
        url: string | null;
    } | null;
    uploadedAt: null;
}>;

// Source: ./sanity/lib/resumes/getResumeBySlug.ts
// Variable: RESUME_BY_ID_QUERY
// Query: *[_type == "resume" && slug.current == $slug] | order(name asc) [0]
export type RESUME_BY_ID_QUERYResult = {
    _id: string;
    _type: "resume";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    resumeFile?: {
        asset?: {
            _ref: string;
            _type: "reference";
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: "sanity.fileAsset";
        };
        _type: "file";
    };
    slug?: Slug;
} | null;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
    interface SanityQueries {
        '*[_type == "application"]{\n        _id,\n        firstName,\n        lastName,\n        email,\n        phone,\n        publishedAt,\n        job->{\n            title\n        },\n        resumeFile{\n            asset->{\n                _ref\n            }\n        }\n    }': ALL_APPLICATIONS_QUERYResult;
        '*[_type == "application" && slug.current == $slug][0]{\n        _id,\n        firstName,\n        lastName,\n        email,\n        phone,\n        publishedAt,\n        job->{\n            title\n        },\n        resumeFile{\n            asset->{\n                _ref\n            }\n        }\n    }': APPLICATION_BY_SLUG_QUERYResult;
        '*[_type == "author"] | order(name asc)\n': ALL_AUTHORSResult;
        '*[_type == "author" && slug.current == $slug] | order(name asc) [0]\n': AUTHOR_BY_ID_QUERYResult;
        '\n        *[_type == "blog"] | order(publishedAt desc) {\n            _id,\n            title,\n            slug,\n            publishedAt,\n            mainImage {\n                asset->{\n                    _id,\n                    url\n                }\n            },\n            excerpt,\n            author->{\n                _id,\n                name,\n                image {\n                    asset->{\n                        _id,\n                        url\n                    }\n                },\n            bio\n            }\n        }\n    ': ALL_BLOGSResult;
        '*[_type == "job"] | order(name asc)\n': ALL_JOB_OPENINGS_QUERYResult;
        '*[_type == "job" && slug.current == $slug] | order(name asc) [0]\n': JOB_BY_ID_QUERYResult;
        '*[_type == "resume"]{\n    _id,\n    user-> { name },\n    "resumeFile": resumeFile.asset-> { url },\n    uploadedAt\n  } | order(uploadedAt desc)': ALL_RESUMES_QUERYResult;
        '*[_type == "resume" && slug.current == $slug] | order(name asc) [0]\n': RESUME_BY_ID_QUERYResult;
    }
}
